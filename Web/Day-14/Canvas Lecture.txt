HTML canvas is an api module, built into most modern browsers. It is represented as a simple HTML tag, <canvas></canvas>.

The reason you would have text inside the canvas element, is the having an alt attribuite on an image, it is there to tell the user something if the element in question is unable to load. There are two main drawing styles in canvas, 2d and 3d, for this project focus on 2d. 

Powerpoint code.

Canvas uses a co-ordinate system, slightly different from the usual coordinates you used in your mathmatics class. y goes from top to bottom, while the x axis remains the same, left top is 0,0.

Different shape methods for canvas.

Quadratic curves, define three points, the two black points are where the line will begin and end, while the third represents the tangent, or the control point which will force your line to curve. 

Bezier curves will have two red dots, or control points so you can manipulate the line further. 

Think about how you used to draw shapes in your mathmatic classes.
To draw a triangle you will need three points defined. So think of your steps and then write the code.

Capturing mouse events, to create a framework of mouse moves that will allow you to generate shapes. consider the normal mouse movements, click, drag andthen release, a very common action. You need to capture these movements using mouse events. 

mouseup, stop clicking
mouseleave, if your mouse leaves the convas element.

For your application you can make a mobile version, though you will need to explore the hammer.js library in order to code the movements 

You will need to consider the handlers you will need to capture mouse events, so that when the user does domething with the mouse then you are able to capture these movements on the canvas element. 

Strategy pattern, to develop your whole application 
canvas common, defines how you handle mouse events
all of the different strategies (different ways of drawing shapes)
The application is made in a simalar style to what one might call a plug and play game, the mouse event handler switches between different strategies depending on the buttons the user presses - if you click draw rectangle you will draw a rectangle.


Code line by line

There are two canvas elements for a reason, a draft and a real, when you draw something onto the canvas you cannot remove it unless you've already implemented an undo system using javascript or jquery, or unlesss you've created a clear button. 
When using your application your user will preform mouse events and when they are finished drawing a particular shape you will need to have a confirming action to tell your canvas element that the shape is finished, eg while drawing a line, you will click, and then drag to draw your line then perhaps you will mouse up to confirm the drawing.

So you have two defined canvas elements, one is the draft, one is the draft and one is the real. Anything that you draw before you confirm (mouseup or whatever handler you choose) everything happens on the canvas draft only! Once you confirm the action then it is committed to the canvas real. 

You really do need two, once a shape is drawn onto canvas real you can consider the resulting picture to be more like an image. It therefore becomes every difficult to seperate elements once they are drawn onto canvas real.

Too make an undo and redo feature in the application you could take a snapshot every mouse event so that you can load previous stages in the canvas creation. If you dont set this up then you wont have an undo function. 

one canvas structure.
The way that you confirm your actions is up to you, perhaps you use that enter key or a mouse up as an event handler. 

code along step by step with the lms material, everyone should atempt to complete thise before you meet and decide what you would like to implement, this will allow to think about what you want as functions in your application more over it allows you to have a little more understanding of what you're capable of so you do not waste your time. 

The code should work in the LMS, if the images wont show up, goto the drive. If you want to try 3-d pictures you can goto threejs.com and explore the code there. 

Cavnas is a standard HTML api, you can goto the MDN and look at tutorials as well as documentation, follow some working examples and change them to what you want for functions.

MDN docs review some shapes

moveTo defines the starting point
lineTo defines the point where you want the coordinates to move nect
stroke will draw the line

there are multiple ways for you to defined the coordinates, you can uses an array to specify them, you can draw using functions or mouseevents, so that you do not have to hardcode every element onto your canvas element 

However this method of drawing through functions if primative, go through it as it will give you an idea of how the canvas element works. 
strokeStyle is colour
explain shape
quadratic curve
open square

example of bubble on MDN
and other shapes?

We should write functions so we dont have hard coded behavior. For example if we are going to generate a generic rectangle function, it will need to take multiple inputs, ctx, starting point, dimensions and color. The function will need these inputs so that it draw any type of rectangle.


Datahiding concept, you want to protect your program frombeing modified by unwanted code, Encapsulation is an important concept that we learnt about in OOP if you want to revise this concept of making functions to chanage your objects the MDN has a good tutorial, though transformation will be difficult as it using matric.

Capture mouse event
our application should capture mouse events - create canvas
capture mouse events to define coordinates and how shapes are formed, but be careful
think about how mouse actions can be chained to make a shape.

We will also need to define a variable to decided if our mouseevent is dragging or not, once you mouse up or leave you will stop dragging. 
mousemove with dragging should be a different action to mousemove without dragging. 

we need ot modualise our code, make classes -- a canvas common file -- define the real and draft to get the 2-D context.

The variable currrent function will store the function that is being used by the user, like circle, square or rectangle.

Go through the rectangle function line by line 
paintfunction is the base call with mouseevents, mouse down is the original coordinates onthe canvas draft, then when you drag you are drawing and sizing the shape on the canvas draft, when released you commit the shape to the cavnas real.
Dragging is refreashed every tenth of a second when you are drawing your shape.

To change the strategy or drawing method you want you should have a selection of buttons that changes the current function variable.

PaintFunction empty class, we dont want the application to throw errors or break so we have an empty classs with all the mouseevents we need. 

Strategy pattern - wiki article.

Canvas element cannot be shaped using CSS, you will need to define the attribuites of height and width on the canvas elements within the html file, with this in mind, you may also need to offset the mouse coordinates depending on the positioning of the canvas element. 

The CSS file can define other things about canvas, like border, and opacity, ensure the your canvas elements cover the same space in the HTML file, so one is on top of the other, be aware that the canvas draft will need to be transparent (so you can see what is on canvas real).

Add buttons to allow the user to use the differnt functions, the variable current function should change based on the button you press. 
The button code can be part of the html, but the actual function (class of drawing rectangle which extends paint function) should be in a seperate JS file so that is it is modular.



work on download the image as a picture if you want?
possible features!
look at examples!
if they use ReactJs dont look at thier mouse handlers will be differnt from the LMS
undo
text
image upload
pixel manipulation so that you can change minute elements
simple tutorials on LMS
look at other material to help you!

mobile support is hard, as you need to learn new syntax for finger events. 


Firebase for storage, you can store images here without a backend so that you can reuse the saved canvas image on another computer
look at documentation

Focus on UX and UI, how it looks is a measure of the application
look at brockwei once more

storage in local storeage - you can store within your own browser as opposed t stroing in fireback and calling the api

if you store your images localls for your undo and redo code, then it can slow down the browser as the load might be too much for the local memory storage. 

If you ue firebase, then if you undo you grab the instance from firebase whenyou press the button you can also use a variable. If you refresh then it will all disappear. 

schedule is flexible  - no stand up
no lectures
we wil do a check up on tuesday or wednesday - will see how much you've achieved
we want you all to finish, so long as you finish an app with some functionalites it will be finger
canvas can has animation, but its hard, it all depends on how you implement it
animation would be on canvas draft

upload via custom domain and surge
deploy to the surge platform, more convinent than github pages!
install surge using npm
it will upload everything to the surge server
you specify server name so you can goto a surge url to find it.

or you can register a real domain you buy
look into the documentation

when youre finished then you deploy, when you want people to see it.


